- name: Check Service principals status
  hosts: jumpserver  # Run the task on the Ansible control node
  gather_facts: no  # We don't need facts for this task
  vars_files:
    - vault.yaml
  tasks:
    - name: create file for list
      ansible.builtin.file:
        path: /opt/HCE/Out_of_standart_SP_list.txt
        state: touch
        force: true
        mode: u+rwx,g-rwx,o-rwx

    - name: Get Service principals clien secret status
      no_log: True
      shell: |
        cat << 'EOF' > /opt/HCE/Out_of_standart_SP_check.sh
        !/bin/bash

        az login --service-principal --username {{ username }} --password {{ password }} --tenant {{ tenant }}

        # Initialize an array to store the results
        results=()
        
        echo "Status              AppId              DisplayName              Total_Date              Owners              Start Date              End Date" > /opt/HCE/Out_of_standart_SP_list.txt
        echo "============================================================================================================================================" >> /opt/HCE/Out_of_standart_SP_list.txt
        
        # Get the list of all Azure AD Applications and store the output in a variable
        for app_id in $(az ad app list --query "[].{AppId: appId}" --output tsv); do
        
            # Get the Azure AD Application details and store the output in a variable
            app_details=$(az ad app show --id $app_id --output json)
            # Extract the DisplayName using jq
            display_name=$(echo "$app_details" | jq -r '.displayName')
        
            #find the owners of applications
            client_owners=$(az ad app owner list --id $app_id --query "[0].{ownerName: displayName}" --output tsv)
            if [ "$client_owners" == "" ]; then
               client_owners=$(echo "NONE")
            fi    
            
            # Get the client secrets for the current App Registration
            client_secrets=$(az ad app credential list --id $app_id --query "[].{startDateTime: startDateTime, endDateTime: endDateTime}" -o tsv)
            
            # Loop through the client secrets
            while read -r start_date end_date; do
                # Check if both start and end dates exist
                if [ "$start_date" != "null" ] && [ "$end_date" != "null" ]; then
                    # Convert dates to Unix timestamps
                    start_timestamp=$(date -u -d "$start_date" +%s)
                    end_timestamp=$(date -u -d "$end_date" +%s)
                    # Calculate the difference in seconds (1 year = 31536000 seconds)
                    one_year_in_seconds=31536000
                    difference=$((end_timestamp - start_timestamp))
        
                    expiry_days="$(( ($end_timestamp - $start_timestamp) / (3600 * 24) ))"
                    # Check if the difference is greater than 1 year
                    if [ $difference -gt $one_year_in_seconds ]; then
                        # Append the result to the array
                        results+=("Warning   $app_id   $display_name   $expiry_days   $client_owners   $start_date   $end_date")
                    fi
                fi
            done <<< "$client_secrets"
        done
        
        # Loop through the array and echo the results
        for result in "${results[@]}"; do
            echo "$result" | column -t >> /opt/HCE/Out_of_standart_SP_list.txt
        done
        EOF
        chmod +x /opt/HCE/Out_of_standart_SP_check.sh

    - name: Save Service principals status to a file
      shell: /opt/HCE/Out_of_standart_SP_check.sh
    
    - name: Read the contents of public_access_enabled_disks.txt
      slurp:
        src: /opt/HCE/Out_of_standart_SP_list.txt  # Replace with the actual path to your Out_of_standart_SP_list.txt file
      register: file_content

    - name: Check file contains 
      set_fact:
        contains_enabled: "{{ 'Warning' in file_content.content | b64decode | string }}"
    
    - name: Sending an e-mail SMTP servers
      become: false
      mail:
        host: myhost.mydomain.com
        port: 25
        sender: ansible@mydomain.com
        to: myteam@mydomain.com
        cc: myteam2@mydomain.com
        subject: "[ Imported ] - Non-Compliance with Azure Service Principal Standards"
        attach: /opt/HCE/Out_of_standart_SP_list.txt
        body: |
            Dear Team,

            We are writing to you about our Azure service principals and their compliance with our company's security standards. 
            We have found that client secrets that have been identified for over a year do not meet company standards.
            
            Azure service principals play a crucial role in securing our cloud infrastructure, and ensuring that they meet our security standards is of paramount importance. This ensures the safety of our data and resources and mitigates potential             security risks.
            
            there are service principals within our Azure environment that have not undergone the necessary updates or security enhancements to align with our company standards, specifically in relation to client secrets. Non-compliance with these             standards poses a significant security risk to our organization.
            
            Action Required:
            
            1. **Immediate Review**: We request that you initiate an immediate review of all Azure service principals associated with client secrets that are not in compliance with our standards.
            
            2. **Remediation**: Any non-compliant service principals must be brought into compliance as soon as possible. This includes updating client secrets, following best practices for secret management, and addressing any other security gaps.
            
            Failure to take immediate corrective action could result in severe security breaches and potential data loss. It is crucial that we address this issue promptly to maintain the security and integrity of our Azure environment.
            
            Please provide an update on the actions taken and the progress of the remediation efforts within 14 days. If you require assistance or additional resources, please do not hesitate to reach out to our [security/compliance team/            department].
            
            Your cooperation in addressing this matter is critical, and we appreciate your prompt attention to this issue. Should you have any questions or require further guidance, please feel free to contact us.
            
            Thank you for your commitment to maintaining the highest security standards for our Azure environment.
            
            Sincerely,
      when: contains_enabled

    - name: delete result file
      shell: rm -rf /opt/HCE/Out_of_standart_SP_check.sh
