- name: check namespace names
  shell: echo "{{ namespace }}" | grep -cx ^openshift.* || true
  register: check_namespace_name

- name: "namespace names control"
  debug:
    msg: "namespace does not start with openshift - [{{ namespace }}]"
  when: check_namespace_name.stdout == "1"

- name: Sending an e-mail SMTP servers
  become: false
  mail:
    host: myhost.mydomain.com
    port: 25
    sender: ansible@garanti.com.tr
    to: "{{ usermail }}"
    subject: "Project Delete - Smart JOB_ID [{{ job_id }}]"
    body: |
        Report from Your Project Delete Request

        "Project Delete Job Result: Cluster - [{{ inventory_hostname }}] - Namespace must not start with openshift - [{{ namespace }}]"
  delegate_to: localhost
  when: 
    - check_namespace_name.stdout == "1"
 
 - name: "Namespace must not start with openshift - [{{ namespace }}]"
  shell: exit 2
  when: check_namespace_name.stdout == "1"

- name: ocp check namespace exist
  shell: |
    curl -ks -H "Authorization: Bearer {{ delete_project_token }}" -H 'Accept: application/json' "{{ url }}/api/v1/namespaces" --insecure | jq -r '.items[].metadata.name' | grep -xc "{{ namespace }}" || true
  register: check_namespace_exist

- name: "namespace does not exist - [{{ namespace }}]"
  debug:
    msg: "Namespace does not exist - [{{ namespace }}]"
  when: check_namespace_exist.stdout != "1"

- name: Sending an e-mail SMTP servers
  become: false
  mail:
    host: myhost.mydomain.com
    port: 25
    sender: ansible@mydomain.com
    to: "{{ usermail }}"
    subject: "Project Delete - Smart JOB_ID [{{ job_id }}]"
    body: |
        Report from Your Project Delete Request

        "Project Delete Job Result: Cluster - [{{ inventory_hostname }}] - Namespace does not exist - [{{ namespace }}]"
  delegate_to: localhost
  when: 
    - check_namespace_exist.stdout != "1"

- name: "namespace does not exist - [{{ namespace }}]"
  shell: exit 5
  when: check_namespace_exist.stdout != "1"

- name: ocp check dc exist
  shell: |
    curl -ks GET -H "Authorization: Bearer {{ delete_project_token }}" -H 'Accept: application/json' "{{ url }}/apis/apps.openshift.io/v1/namespaces/{{ namespace }}/deploymentconfigs" --insecure | jq -r '.items[].metadata.name' | wc -l || true
  register: check_dc_exist

- name: "check dc exist - [{{ namespace }}]"
  debug:
    msg: "dc exist - [{{ namespace }}]"
  when: check_dc_exist.stdout > "0"
  
- name: Sending an e-mail SMTP servers
  become: false
  mail:
    host: myhost.mydomain.com
    port: 25
    sender: ansible@mydomain.com
    to: "{{ usermail }}"
    subject: "Project Delete - Smart JOB_ID [{{ job_id }}]"
    body: |
        Report from Your Project Delete Request

        "Project Delete Job Result: Cluster - [{{ inventory_hostname }}] - Deploymentconfig exist. Deletion cannot be performed - [{{ namespace }}]"
  delegate_to: localhost
  when: 
    - check_dc_exist.stdout > "0"

- name: "check dc exist - [{{ namespace }}]"
  shell: exit 10
  when: check_dc_exist.stdout > "0"
  
- name: ocp check deploy exist
  shell: |
    curl -ks GET -H "Authorization: Bearer {{ delete_project_token }}" -H 'Accept: application/json' "{{ url }}/apis/apps/v1/namespaces/{{ namespace }}/deployments" --insecure | jq -r '.items[].metadata.name' | wc -l || true
  register: check_deploy_exist

- name: "check deploy exist - [{{ namespace }}]"
  debug:
    msg: "deploy exist - [{{ namespace }}]"
  when: check_deploy_exist.stdout > "0"
 
- name: Sending an e-mail SMTP servers
  become: false
  mail:
    host: myhost.mydomain.com
    port: 25
    sender: ansible@mydomain.com
    to: "{{ usermail }}"
    subject: "Project Delete - Smart JOB_ID [{{ job_id }}]"
    body: |
        Report from Your Project Delete Request

        "Project Delete Job Result: Cluster - [{{ inventory_hostname }}] - Deployment exist. Deletion cannot be performed - [{{ namespace }}]"
  delegate_to: localhost
  when: 
    - check_deploy_exist.stdout > "0"

- name: "check deploy exist - [{{ namespace }}]"
  shell: exit 15
  when: check_deploy_exist.stdout > "0"

- name: ocp get egress ip exist
  shell: |
    curl -ks GET -H "Authorization: Bearer {{ delete_project_token }}" -H 'Accept: application/json' "{{ url }}/apis/network.openshift.io/v1/netnamespaces/{{ namespace }}" --insecure | jq -r '.egressIPs[]' | wc -l || true
  register: check_egress_exist

- name: ocp get egress ip for INFOBOX
  shell: |
    curl -ks GET -H "Authorization: Bearer {{ delete_project_token }}" -H 'Accept: application/json' "{{ url }}/apis/network.openshift.io/v1/netnamespaces/{{ namespace }}" --insecure | jq -r '.egressIPs[]' || true
  register: get_egress_ip
  when: check_egress_exist.stdout > "0"

- name: Remove a ipv4 dhcp fixed address
  nios_fixed_address:
    name: ipv4_fixed
    ipaddr: 192.168.10.1
    mac: 08:6d:41:e8:fd:e8
    network: "{{ network }}"
    network_view: default
    state: absent
    provider:
      host: "{{ inventory_hostname_short }}"
      username: admin
      password: admin
  connection: local
  delegate_to: localhost
  when: check_egress_exist.stdout > "0"

- name: ocp delete project
  shell: |
    curl -ks \
        -X DELETE \
        -d @- \
        -H "Authorization: Bearer {{ delete_project_token }}" \
        -H 'Accept: application/json' \
        -H 'Content-Type: application/json' \
        {{ url }}/apis/project.openshift.io/v1/projects/{{ namespace }}-{{ env }}?gracePeriodSeconds=0<<'EOF'
    EOF
  args:
    executable: /bin/bash
  register: result
  ignore_errors: true

- name: Sending an e-mail SMTP servers
  become: false
  mail:
    host: myhost.mydomain.com
    port: 25
    sender: ansible@mydomain.com
    to: "{{ usermail }}"
    subject: "Project Delete - Smart JOB_ID [{{ job_id }}]"
    body: |
        Report from Your Project Delete Request
        
        {% if ("Success" in result.stdout) %}
        "Project Delete Job Result is [Success]: Cluster - [{{ inventory_hostname }}] - The project has been deleted - [{{ namespace }}]"
        {% else %}
        "Project Delete Job Result is [FAILED] : Cluster - [{{ inventory_hostname }}] - The project has not been deleted. Please Contact with Mygroup@mydomainÃ§com teams"
        {% endif %}
  delegate_to: localhost
