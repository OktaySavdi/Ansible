- name: ocp check namespace exist
  shell: |
    curl -ks -H "Authorization: Bearer {{ delete_project_token }}" -H 'Accept: application/json' "{{ url }}/api/v1/namespaces" --insecure | jq -r '.items[].metadata.name' | grep -xc "{{ namespace }}-{{ env }}" || true
  register: check_namespace_exist

- name: "namespace does not exist - [{{ namespace }}-{{ env }}]"
  debug:
    msg: "Namespace does not exist - [{{ namespace }}-{{ env }}]"
  when: check_namespace_exist.stdout != "1"

- meta: end_play
  when: check_namespace_exist.stdout != "1"

- name: ocp check dc exist
  shell: |
    curl -ks GET -H "Authorization: Bearer {{ delete_project_token }}" -H 'Accept: application/json' "{{ url }}/apis/apps.openshift.io/v1/namespaces/{{ namespace }}-{{ env }}/deploymentconfigs" --insecure | jq -r '.items[].metadata.name' | wc -l || true
  register: check_dc_exist

- name: "check dc exist - [{{ namespace }}-{{ env }}]"
  debug:
    msg: "dc exist - [{{ namespace }}-{{ env }}]"
  when: check_dc_exist.stdout > "0"

- meta: end_play
  when: check_dc_exist.stdout > "0"

- name: ocp check deploy exist
  shell: |
    curl -ks GET -H "Authorization: Bearer {{ delete_project_token }}" -H 'Accept: application/json' "{{ url }}/apis/apps/v1/namespaces/{{ namespace }}-{{ env }}/deployments" --insecure | jq -r '.items[].metadata.name' | wc -l || true
  register: check_deploy_exist

- name: "check deploy exist - [{{ namespace }}-{{ env }}]"
  debug:
    msg: "deploy exist - [{{ namespace }}-{{ env }}]"
  when: check_deploy_exist.stdout > "0"

- meta: end_play
  when: check_deploy_exist.stdout > "0"

- name: ocp get egress ip exist
  shell: |
    curl -ks GET -H "Authorization: Bearer {{ delete_project_token }}" -H 'Accept: application/json' "{{ url }}/apis/network.openshift.io/v1/netnamespaces/{{ namespace }}-{{ env }}" --insecure | jq -r '.egressIPs[]' | wc -l || true
  register: check_egress_exist

- name: ocp get egress ip for INFOBOX
  shell: |
    curl -ks GET -H "Authorization: Bearer {{ delete_project_token }}" -H 'Accept: application/json' "{{ url }}/apis/network.openshift.io/v1/netnamespaces/{{ namespace }}-{{ env }}" --insecure | jq -r '.egressIPs[]' || true
  register: get_egress_ip
  when: check_egress_exist.stdout > "0"

- name: Remove a ipv4 dhcp fixed address
  community.general.nios_fixed_address:
    name: ipv4_fixed
    ipaddr: 192.168.10.1
    mac: 08:6d:41:e8:fd:e8
    network: 192.168.10.0/24
    network_view: default
    state: absent
    provider:
      host: "{{ inventory_hostname_short }}"
      username: admin
      password: admin
  connection: local
  delegate_to: localhost
  when: check_egress_exist.stdout > "0"

- name: ocp delete project
  shell: |
    curl -ks \
        -X DELETE \
        -d @- \
        -H "Authorization: Bearer {{ delete_project_token }}" \
        -H 'Accept: application/json' \
        -H 'Content-Type: application/json' \
        {{ url }}/apis/project.openshift.io/v1/projects/{{ namespace }}-{{ env }}?gracePeriodSeconds=0<<'EOF'
    EOF
  args:
    executable: /bin/bash
  ignore_errors: true
