---
# Task for getting token
- name: OCP | egress | Set the OCP API token value and rescue_retries control variable
  set_fact:  
    token: "{{ egress_creation_sa }}"
    rescue_retries: 0
  no_log: true

- name: check egress ip to namespace
  k8s:
    api_key: "{{ token }}"
    host: "{{ api_url }}"
    verify_ssl: "{{ ocp_verify_ssl }}"
    kind: NetNamespace
    name: "{{ project_name }}"
  register: check_egress_exist
  
# Task for getting next available IP from Infoblox
- name: Get next ip
  set_fact:
    next_ipaddr: "{{ lookup('nios_next_ip', '10.10.10.10.0/21', provider={'host': 'ipmanager', 'username': 'MyOCPUser', 'password':  MyOCPUser_password }) }}"
  delegate_to: localhost
  when: check_egress_exist.result.egressIPs is not defined

# Task for IPv4 reservation on Infoblox
- name:  Dynamically add host record to next available ip
  nios_fixed_address:
    name: "{{ project_name }}"
    ipaddr: "{{ next_ipaddr | first }}"
    mac: 00:00:00:00:00:00
    network: 10.10.10.10.0/21
    network_view: default
    state: present
    comment: ipv4 reservation for egress ip
    provider:
      host: ipmanager
      username: MyOCPUser
      password: "{{ MyOCPUser_password }}"
  connection: local
  delegate_to: localhost
  when: check_egress_exist.result.egressIPs is not defined

# Task for assign egress IPs to namespace
- name: Assign egress ip to namespace
  k8s:
#    api_version: maistra.io/v1
    api_key: "{{ token }}"
    host: "{{ api_url }}"
    verify_ssl: "{{ ocp_verify_ssl }}"
    kind: NetNamespace
    merge_type: merge
    name: "{{ project_name }}"
#    force: true
    resource_definition: |
      egressIPs:
      - "{{ next_ipaddr | first }}"
  when: check_egress_exist.result.egressIPs is not defined
