---
# Task for log in to Openshift and get API token if user/password is used to authenticate
- name: OCP | Limits | Log in (obtain access token)
  k8s_auth:
    username: "{{ ocp_username }}"
    password: "{{ ocp_password }}"
    host: "{{ api_url }}"
    verify_ssl: "{{ ocp_verify_ssl }}"
  register: k8s_auth_results
  when: (ocp_token is not defined or ocp_token == "")

# Task for set API token (obtained in previous task or passed as parameter, ie a Service Account token)
- name: OCP | Limits | Set the OCP API token value
  set_fact:  
    token: "{% if ocp_token is defined and ocp_token != '' %}{{ ocp_token }} {% else %}{{ k8s_auth_results.k8s_auth.api_key }}{% endif %}"
  no_log: true

#Task for debug limit template
#- name: Debug limit template
#  debug:
#    msg: "{{ item }}"
#  loop:
#    - "{{ limit_ranges }}"

# Task for set Resource Limits to project
- name: OCP | Limits Role | Set Project Limits
  k8s:
    api_key: "{{ token }}"
    host: "{{ api_url }}"
    verify_ssl: "{{ ocp_verify_ssl }}"
    state: present
    definition: "{{ lookup('template', 'limit.yml.j2') | from_yaml }}"
    force: true
    validate:
      fail_on_error: no
      strict: yes
  loop:
    "{{ limit_ranges }}"

# Task for set Resource Limits to project
- name: OCP | Limits Role | Check Project Limits
  k8s_facts:
    api_version: v1
    api_key: "{{ token }}"
    host: "{{ api_url }}"
    verify_ssl: "{{ ocp_verify_ssl }}"
    kind: LimitRange
    namespace: "{{ project_name }}"
  register: get_limits

# Tag to show results
- debug:
    var: get_limits.resources

# Task to revoke access token if user/password was used to authenticate
- name: OCP | Limits Role | Log out (revoke access token)
  k8s_auth:
    state: absent
    api_key: "{{ token }}"
    host: "{{ api_url }}"
    verify_ssl: "{{ ocp_verify_ssl }}"
  when: k8s_auth_results.k8s_auth.api_key is defined
